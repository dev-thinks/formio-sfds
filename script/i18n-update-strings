#!/usr/bin/env node
const fs = require('fs')
const dot = require('dot-component')
const stringsPath = require.resolve('../src/i18n/en.json')
const strings = require(stringsPath)
const shared = require('../src/components/schema/shared')
const { eachComponent } = require('../lib/i18n')

eachComponent(shared.components, comp => {
  if (comp.properties) {
    if (!strings.components) {
      strings.components = {}
    }

    const id = comp.properties.sfdsComponentId
    const keys = {}
    let hasKeys = false
    for (const prop in comp.properties) {
      if (/^[a-z]{2,}:/.test(prop)) {
        // eslint-disable-next-line no-unused-vars
        const [lang, key] = prop.split(':')
        if (!(key in keys)) {
          const val = getValue(comp, key)
          if (val) {
            console.warn('%s.%s = %s', id, key, JSON.stringify(val))
            dot.set(keys, key, val)
            hasKeys = true
          }
        }
      }
    }
    if (hasKeys) {
      strings.components[id] = Object.assign({}, strings.components[id], keys)
    } else {
      console.warn('[%s] no keys found', id)
    }
  }
})

fs.writeFileSync(stringsPath, JSON.stringify(strings, null, 2), 'utf8')

function getValue (comp, key) {
  if (key.startsWith('values.')) {
    // eslint-disable-next-line no-unused-vars
    const [prefix, value] = key.split('.')
    const item = comp.data.values.find(v => v.value === value)
    return item && item.label
  } else {
    return dot.get(comp, key)
  }
}
